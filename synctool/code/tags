!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^typedef enum {ADD=1,SUB, MUL, DIV} OPER;$/;"	e	enum:__anon2	file:
ADD	syncdir/bigint/BigInt_Server/sock.h	/^typedef enum {ADD,SUB,MUL,DIV,QUIT}OPER_ENUM;$/;"	e	enum:__anon1
Add	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Add(BigInt &bt, const BigInt &bt1, const BigInt &bt2)$/;"	f	class:BigInt
AddItem	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^u_char BigInt::AddItem(u_char a, u_char b, u_char &sign)$/;"	f	class:BigInt
AddMove	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::AddMove(BigInt &bt, const BigInt &bt1, int offset)$/;"	f	class:BigInt
BUFFER_SIZE	syncdir/bigint/BigInt_Server/sock.h	18;"	d
BigInt	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt::BigInt(long value)$/;"	f	class:BigInt
BigInt	syncdir/bigint/BigInt_Server/BigInt/BigInt.h	/^class BigInt$/;"	c
BigIntCopy	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::BigIntCopy(char *buf, size_t len, size_t &pos)$/;"	f	class:BigInt
BigIntOper	syncdir/bigint/BigInt_Server/sock.h	/^typedef struct BigIntOper$/;"	s
BigIntOper	syncdir/bigint/BigInt_Server/sock.h	/^}BigIntOper;$/;"	t	typeref:struct:BigIntOper
BigIntServer	syncdir/bigint/BigInt_Server/sock.cpp	/^void* BigIntServer(void *arg)$/;"	f
CXXFLAGS	Makefile	/^CXXFLAGS = -g -fpermissive -lpthread -I lib lib\/*.o$/;"	m
CXXFLAGS	lib/Makefile	/^CXXFLAGS = -g -D$(DISTRO) -fpermissive$/;"	m
CXXFLAGS	ut/Makefile	/^CXXFLAGS = -g -fpermissive -D$(DISTRO) -I ..\/lib ..\/lib\/*.o$/;"	m
Clear	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Clear()$/;"	f	class:BigInt
Command	lib/command.h	/^class Command$/;"	c
CommandExecuter	lib/command.h	/^class CommandExecuter$/;"	c
DEFAULT_SIZE	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	enum{DEFAULT_SIZE = 10, INC_SIZE = 5};$/;"	e	enum:SeqList::__anon3
DISTRO	lib/Makefile	/^    DISTRO = RHEL$/;"	m
DISTRO	lib/Makefile	/^    DISTRO = UBUNTU$/;"	m
DISTRO	lib/Makefile	/^DISTRO = $(shell lsb_release -is)$/;"	m
DISTRO	ut/Makefile	/^    DISTRO = RHEL$/;"	m
DISTRO	ut/Makefile	/^    DISTRO = UBUNTU$/;"	m
DISTRO	ut/Makefile	/^DISTRO = $(shell lsb_release -is)$/;"	m
DIV	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^typedef enum {ADD=1,SUB, MUL, DIV} OPER;$/;"	e	enum:__anon2	file:
DIV	syncdir/bigint/BigInt_Server/sock.h	/^typedef enum {ADD,SUB,MUL,DIV,QUIT}OPER_ENUM;$/;"	e	enum:__anon1
Data_Handler	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^void Data_Handler(BigInt &bt, BigInt &bt1, BigInt &bt2, OPER &oper)$/;"	f
Div	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Div(BigInt &bt, const BigInt &bt1, const BigInt &bt2)$/;"	f	class:BigInt
GetSymbol	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^Symbol BigInt::GetSymbol()const$/;"	f	class:BigInt
GetSymbol	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^Symbol SeqList<Type>::GetSymbol()const$/;"	f	class:SeqList
Html_Header	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^void Html_Header()$/;"	f
INC_SIZE	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	enum{DEFAULT_SIZE = 10, INC_SIZE = 5};$/;"	e	enum:SeqList::__anon3
ISspace	syncdir/bigint/Web_Server/httpd.c	29;"	d	file:
Inc	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	bool Inc()$/;"	f	class:SeqList
LASingletonTemplateBase	lib/singletontemplate.h	/^        LASingletonTemplateBase()$/;"	f	class:LASingletonTemplateBase
LASingletonTemplateBase	lib/singletontemplate.h	/^class LASingletonTemplateBase $/;"	c
LISTEN_QUEUE	syncdir/bigint/BigInt_Server/sock.h	16;"	d
LoadData	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::LoadData(size_t sz)$/;"	f	class:BigInt
MAX_BUFFER_SIZE	ut/utudpclient.cpp	/^const int MAX_BUFFER_SIZE = 1024;$/;"	v
MUL	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^typedef enum {ADD=1,SUB, MUL, DIV} OPER;$/;"	e	enum:__anon2	file:
MUL	syncdir/bigint/BigInt_Server/sock.h	/^typedef enum {ADD,SUB,MUL,DIV,QUIT}OPER_ENUM;$/;"	e	enum:__anon1
Message	lib/netutils.h	/^struct Message $/;"	s
Message	ut/utudpclient.cpp	/^struct Message $/;"	s	file:
Mod	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Mod(BigInt &bt, const BigInt &bt1, const BigInt &bt2)$/;"	f	class:BigInt
Mul	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Mul(BigInt &bt, const BigInt &bt1, const BigInt &bt2)$/;"	f	class:BigInt
MulItem	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::MulItem(BigInt &bt, const BigInt &bt1, u_char x)$/;"	f	class:BigInt
NEGATIVE	syncdir/bigint/BigInt_Server/BigInt/utili.h	/^typedef enum{POSITIVE, NEGATIVE}Symbol;$/;"	e	enum:__anon4
OBJECT	syncdir/bigint/BigInt_Server/Makefile	/^OBJECT=.\/BigInt\/BigInt.o$/;"	m
OPER	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^typedef enum {ADD=1,SUB, MUL, DIV} OPER;$/;"	t	typeref:enum:__anon2	file:
OPER_ENUM	syncdir/bigint/BigInt_Server/sock.h	/^typedef enum {ADD,SUB,MUL,DIV,QUIT}OPER_ENUM;$/;"	t	typeref:enum:__anon1
PORT	ut/utudpclient.cpp	/^const int PORT = 8888;$/;"	v
POSITIVE	syncdir/bigint/BigInt_Server/BigInt/utili.h	/^typedef enum{POSITIVE, NEGATIVE}Symbol;$/;"	e	enum:__anon4
PkgCommand	lib/command.cpp	/^PkgCommand::PkgCommand(string ipkgfile, string rpkgfile)$/;"	f	class:PkgCommand
PkgCommand	lib/command.h	/^class PkgCommand: public Command$/;"	c
PowMod	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::PowMod(BigInt &bt, BigInt &a, BigInt &b, const BigInt &n)$/;"	f	class:BigInt
Power	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Power(BigInt &bt, const BigInt &bt1, const BigInt &bt2)$/;"	f	class:BigInt
Power	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Power(BigInt &bt, const BigInt &bt1, u_long n)$/;"	f	class:BigInt
PrintData	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::PrintData()const$/;"	f	class:BigInt
QUIT	syncdir/bigint/BigInt_Server/sock.h	/^typedef enum {ADD,SUB,MUL,DIV,QUIT}OPER_ENUM;$/;"	e	enum:__anon1
RecvData	syncdir/bigint/BigInt_Server/sock.cpp	/^void RecvData(int sockConn, BigInt &bt)$/;"	f
SERVER_IP	syncdir/bigint/BigInt_Server/sock.h	14;"	d
SERVER_PORT	syncdir/bigint/BigInt_Server/sock.h	15;"	d
SERVER_STRING	syncdir/bigint/Web_Server/httpd.c	31;"	d	file:
STR_MAX_LEN	laclient.cpp	/^const int STR_MAX_LEN = 1024;$/;"	v
SUB	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^typedef enum {ADD=1,SUB, MUL, DIV} OPER;$/;"	e	enum:__anon2	file:
SUB	syncdir/bigint/BigInt_Server/sock.h	/^typedef enum {ADD,SUB,MUL,DIV,QUIT}OPER_ENUM;$/;"	e	enum:__anon1
ScriptCommand	lib/command.cpp	/^ScriptCommand::ScriptCommand(string scriptdir)$/;"	f	class:ScriptCommand
ScriptCommand	lib/command.h	/^class ScriptCommand: public Command$/;"	c
SendData	syncdir/bigint/BigInt_Server/sock.cpp	/^void SendData(int sockConn, BigInt *pbt)$/;"	f
SeqList	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^SeqList<Type>::SeqList(const SeqList<Type> &bt)$/;"	f	class:SeqList
SeqList	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^SeqList<Type>::SeqList(size_t sz)$/;"	f	class:SeqList
SeqList	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^class SeqList$/;"	c
SetSymbol	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::SetSymbol(Symbol sign)$/;"	f	class:BigInt
SetSymbol	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::SetSymbol(Symbol sign)$/;"	f	class:SeqList
Show_Result	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^void Show_Result(const BigInt &bt, const BigInt &bt1, const BigInt &bt2, OPER oper)$/;"	f
Square	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Square(BigInt &bt, const BigInt &bt1)$/;"	f	class:BigInt
Sub	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::Sub(BigInt &bt, const BigInt &bt1, const BigInt &bt2)$/;"	f	class:BigInt
SubItem	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^u_char BigInt::SubItem(u_char a, u_char b, u_char &sign)$/;"	f	class:BigInt
Symbol	syncdir/bigint/BigInt_Server/BigInt/utili.h	/^typedef enum{POSITIVE, NEGATIVE}Symbol;$/;"	t	typeref:enum:__anon4
SyncCommand	lib/command.cpp	/^SyncCommand::SyncCommand(string host, string sharedir)$/;"	f	class:SyncCommand
SyncCommand	lib/command.h	/^class SyncCommand: public Command$/;"	c
UpdateCommand	lib/command.cpp	/^UpdateCommand::UpdateCommand(string upkgfile)$/;"	f	class:UpdateCommand
UpdateCommand	lib/command.h	/^class UpdateCommand: public Command$/;"	c
_SOCK_H	syncdir/bigint/BigInt_Server/sock.h	2;"	d
_UTILI_H	syncdir/bigint/BigInt_Server/BigInt/utili.h	2;"	d
__COMMMAND__	lib/command.h	2;"	d
__CONFIGPARSER__	lib/configparser.h	2;"	d
__FSUTILS__	lib/fsutils.h	2;"	d
__LASINGLETON_HEADER__	lib/singletontemplate.h	4;"	d
__LOGUTILS__	lib/logutils.h	2;"	d
__MISC__	lib/miscutils.h	2;"	d
__NETUTILS__	lib/netutils.h	2;"	d
__NFSUTILS__	lib/nfsutils.h	2;"	d
__STRUTILS__	lib/strutils.h	2;"	d
abspath	lib/fsutils.cpp	/^int fsutils::abspath(char* input, char* output)$/;"	f	class:fsutils
accept_request	syncdir/bigint/Web_Server/httpd.c	/^void* accept_request(void* arg)$/;"	f
atexit1	ut/utreturnvalue.cpp	/^void atexit1()$/;"	f
atexit2	ut/utreturnvalue.cpp	/^void atexit2()$/;"	f
back	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^u_char BigInt::back()const$/;"	f	class:BigInt
back	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^typename SeqList<Type>::const_reference SeqList<Type>::back()const$/;"	f	class:SeqList
back	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^typename SeqList<Type>::reference SeqList<Type>::back()$/;"	f	class:SeqList
bad_request	syncdir/bigint/Web_Server/httpd.c	/^void bad_request(int client)$/;"	f
base	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	Type   *base;$/;"	m	class:SeqList
big	syncdir/bigint/BigInt_Server/BigInt/BigInt.h	/^	SeqList<u_char> big;$/;"	m	class:BigInt
bins	ut/Makefile	/^bins = $(shell files=""; for file in `ls *.cpp *.c 2>\/dev\/null`; do obj=`echo $$file |sed -r 's\/(.*)\\.(c|cpp)\/\\1\/g'`; files="$$files $$obj"; done ; echo $$files)$/;"	m
bt1	syncdir/bigint/BigInt_Server/sock.h	/^    BigInt *bt1;$/;"	m	struct:BigIntOper
bt2	syncdir/bigint/BigInt_Server/sock.h	/^    BigInt *bt2;$/;"	m	struct:BigIntOper
buildmsg	lib/netutils.cpp	/^char* netutils::buildmsg(int argc, char** argv, int& bufflen)$/;"	f	class:netutils
cannot_execute	syncdir/bigint/Web_Server/httpd.c	/^void cannot_execute(int client)$/;"	f
capacity	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	size_t capacity;$/;"	m	class:SeqList
cat	syncdir/bigint/Web_Server/httpd.c	/^void cat(int client, FILE *resource)$/;"	f
clear	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::clear()$/;"	f	class:BigInt
clear	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::clear()$/;"	f	class:SeqList
clear_head_zero	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::clear_head_zero()$/;"	f	class:BigInt
cmd	lib/netutils.h	/^    int cmd;$/;"	m	struct:Message
cmd	ut/utudpclient.cpp	/^    int cmd;$/;"	m	struct:Message	file:
command	syncdir/bigint/BigInt_Server/sock.h	/^    OPER_ENUM command;$/;"	m	struct:BigIntOper
commands	lib/command.cpp	/^deque<Command*> CommandExecuter::commands = deque<Command*>();$/;"	m	class:CommandExecuter	file:
commands	lib/command.h	/^        static deque<Command*> commands;$/;"	m	class:CommandExecuter
cond	lib/command.cpp	/^pthread_cond_t CommandExecuter::cond = PTHREAD_COND_INITIALIZER;$/;"	m	class:CommandExecuter	file:
cond	lib/command.h	/^        static pthread_cond_t  cond;$/;"	m	class:CommandExecuter
configbi	plugins/bigintinit.sh	/^function configbi()$/;"	f
configdb	plugins/bigintinit.sh	/^function configdb()$/;"	f
confignfs	lib/nfsutils.cpp	/^int nfsutils::confignfs(string sharedir, string nfsopts)$/;"	f	class:nfsutils
configparser	lib/configparser.cpp	/^configparser::configparser()$/;"	f	class:configparser
configparser	lib/configparser.h	/^class configparser: public LASingletonTemplateBase<configparser>$/;"	c
const_reference	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	typedef const Type& const_reference;$/;"	t	class:SeqList
create	ut/utsingleton.cpp	/^        static singleton* create()$/;"	f	class:singleton
createcmd	lib/command.cpp	/^PkgCommand* PkgCommand::createcmd(string ipkgfile, string rpkgfile)$/;"	f	class:PkgCommand
createcmd	lib/command.cpp	/^ScriptCommand* ScriptCommand::createcmd(string scriptdir)$/;"	f	class:ScriptCommand
createcmd	lib/command.cpp	/^SyncCommand* SyncCommand::createcmd(string host, string sharedir)$/;"	f	class:SyncCommand
createcmd	lib/command.cpp	/^UpdateCommand* UpdateCommand::createcmd(string upkgfile)$/;"	f	class:UpdateCommand
debuglog	lib/logutils.cpp	/^int logutils::debuglog(const char *fmt, ...)$/;"	f	class:logutils
dump	lib/configparser.cpp	/^void configparser::dump()$/;"	f	class:configparser
endswith	lib/strutils.cpp	/^int strutils::endswith(string lhs, string rhs)$/;"	f	class:strutils
eoltype	lib/logutils.h	/^        typedef ostream&  (*eoltype)(ostream&);$/;"	t	class:logutils
erase	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::erase(const Type &key)$/;"	f	class:SeqList
errlog	lib/logutils.cpp	/^int logutils::errlog(const char *fmt, ...)$/;"	f	class:logutils
error_die	syncdir/bigint/Web_Server/httpd.c	/^void error_die(const char *sc)$/;"	f
execute	lib/command.cpp	/^int PkgCommand::execute()$/;"	f	class:PkgCommand
execute	lib/command.cpp	/^int ScriptCommand::execute()$/;"	f	class:ScriptCommand
execute	lib/command.cpp	/^int SyncCommand::execute()$/;"	f	class:SyncCommand
execute	lib/command.cpp	/^int UpdateCommand::execute()$/;"	f	class:UpdateCommand
execute_cgi	syncdir/bigint/Web_Server/httpd.c	/^void execute_cgi(int client, const char *path,$/;"	f
executecmd	lib/command.cpp	/^void* CommandExecuter::executecmd(void* args)$/;"	f	class:CommandExecuter
extractmsg	lib/command.cpp	/^void CommandExecuter::extractmsg(char* recvbuf, int bufflen, sockaddr_in& saddr, string& myname)$/;"	f	class:CommandExecuter
find	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^int SeqList<Type>::find(const Type &key)$/;"	f	class:SeqList
front	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^typename SeqList<Type>::const_reference SeqList<Type>::front()const$/;"	f	class:SeqList
front	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^typename SeqList<Type>::reference SeqList<Type>::front()$/;"	f	class:SeqList
fsutils	lib/fsutils.h	/^class fsutils $/;"	c
get_instance_ptr	lib/singletontemplate.h	/^        static T* get_instance_ptr()$/;"	f	class:LASingletonTemplateBase
get_instance_ref	lib/singletontemplate.h	/^        static T& get_instance_ref()$/;"	f	class:LASingletonTemplateBase
get_line	syncdir/bigint/Web_Server/httpd.c	/^int get_line(int sock, char *buf, int size)$/;"	f
getexitcode	lib/miscutils.cpp	/^int miscutils::getexitcode(int exitstatus)$/;"	f	class:miscutils
getnicbrdaddr	lib/netutils.cpp	/^int netutils::getnicbrdaddr(string& ifname, string& brdaddr)$/;"	f	class:netutils
getvalue	lib/configparser.cpp	/^int configparser::getvalue(char* key, string& value)$/;"	f	class:configparser
getvalue	lib/configparser.cpp	/^int configparser::getvalue(string& key, string& value)$/;"	f	class:configparser
glogger	lib/logutils.h	/^static logutils& glogger = logutils::get_instance_ref();$/;"	v
gparser	lib/configparser.h	/^static configparser* gparser = configparser::get_instance_ptr();$/;"	v
haskey	lib/configparser.cpp	/^bool configparser::haskey(string& key)$/;"	f	class:configparser
headers	syncdir/bigint/Web_Server/httpd.c	/^void headers(int client, const char *filename)$/;"	f
host	lib/command.h	/^        string host;$/;"	m	class:SyncCommand
infolog	lib/logutils.cpp	/^int logutils::infolog(const char *fmt, ...)$/;"	f	class:logutils
initdaemon	lib/miscutils.cpp	/^void miscutils::initdaemon(int argc, char** argv)$/;"	f	class:miscutils
initdest	lib/netutils.cpp	/^void netutils::initdest(sockaddr_in& dest)$/;"	f	class:netutils
initkvmap	lib/configparser.cpp	/^int configparser::initkvmap(string conf)$/;"	f	class:configparser
initscripts	lib/command.cpp	/^void ScriptCommand::initscripts() $/;"	f	class:ScriptCommand
initsocket	lib/netutils.cpp	/^int netutils::initsocket()$/;"	f	class:netutils
inlist	lib/strutils.cpp	/^bool strutils::inlist(vector<string>& strlist, string& key)$/;"	f	class:strutils
instance	ut/utsingleton.cpp	/^        static singleton* instance;$/;"	m	class:singleton	file:
instance	ut/utsingleton.cpp	/^singleton* singleton::instance = NULL;$/;"	m	class:singleton	file:
ipkg	lib/command.h	/^        string ipkg;$/;"	m	class:PkgCommand
isexported	lib/nfsutils.cpp	/^bool nfsutils::isexported(string sharedir)$/;"	f	class:nfsutils
ismounted	lib/nfsutils.cpp	/^bool nfsutils::ismounted(string nfsloc, string sharedir, string mpt)$/;"	f	class:nfsutils
join	lib/strutils.cpp	/^int strutils::join(vector<string>& strvec, string separator, string& ret)$/;"	f	class:strutils
kvmap	lib/configparser.h	/^        map<string, string> kvmap;$/;"	m	class:configparser
len	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	size_t len;$/;"	m	class:SeqList
lock	lib/command.cpp	/^pthread_mutex_t CommandExecuter::lock = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:CommandExecuter	file:
lock	lib/command.h	/^        static pthread_mutex_t lock; $/;"	m	class:CommandExecuter
log	lib/logutils.cpp	/^int logutils::log(int priority, const char *fmt, ...)$/;"	f	class:logutils
logutils	lib/logutils.h	/^        logutils(){};$/;"	f	class:logutils
logutils	lib/logutils.h	/^class logutils: public LASingletonTemplateBase<logutils>$/;"	c
main	laclient.cpp	/^int main(int argc, char** argv)$/;"	f
main	lasync.cpp	/^int main(int argc, char** argv)$/;"	f
main	syncdir/bigint/BigInt_Server/BigIntSer.cpp	/^int main(int argc, char* argv[])$/;"	f
main	syncdir/bigint/BigInt_Server/sock.cpp	/^int main(int argc, char *argv[])$/;"	f
main	syncdir/bigint/BigInt_Sql/login.c	/^int main()$/;"	f
main	syncdir/bigint/BigInt_Sql/register.c	/^int main()$/;"	f
main	syncdir/bigint/Web_Server/httpd.c	/^int main(void)$/;"	f
main	ut/strtest.cpp	/^int main()$/;"	f
main	ut/syncdir/aaa.c	/^int main()$/;"	f
main	ut/syncdir/test.c	/^int main()$/;"	f
main	ut/syncdir/test1.c	/^int main()$/;"	f
main	ut/utarguments.cpp	/^int main(int argc, char** argv)$/;"	f
main	ut/utcommand.cpp	/^int main()$/;"	f
main	ut/utconfigparser.cpp	/^int main()$/;"	f
main	ut/utcow.cpp	/^int main()$/;"	f
main	ut/utctest.c	/^int main()$/;"	f
main	ut/utdaemon.cpp	/^int main()$/;"	f
main	ut/utdir.cpp	/^int main()$/;"	f
main	ut/utenumeratenics.cpp	/^int main(int argc, char *argv[])$/;"	f
main	ut/utexitstatus.cpp	/^int main(int argc, char** argv)$/;"	f
main	ut/utfopen.cpp	/^int main()$/;"	f
main	ut/utfstream.cpp	/^int main()$/;"	f
main	ut/uthostname.cpp	/^int main()$/;"	f
main	ut/utistream.cpp	/^int main()$/;"	f
main	ut/utistreamiterator.cpp	/^int main()$/;"	f
main	ut/utkill.cpp	/^int main()$/;"	f
main	ut/utlog.cpp	/^int main()$/;"	f
main	ut/utmacro.cpp	/^int main()$/;"	f
main	ut/utnetutils.cpp	/^int main()$/;"	f
main	ut/utnfsutils.cpp	/^int main()$/;"	f
main	ut/utopen.cpp	/^int main()$/;"	f
main	ut/utregexp.cpp	/^int main()$/;"	f
main	ut/utreturnvalue.cpp	/^int main()$/;"	f
main	ut/utsingleton.cpp	/^int main()$/;"	f
main	ut/utstrutils.cpp	/^int main()$/;"	f
main	ut/utudpclient.cpp	/^int main()$/;"	f
miscutils	lib/miscutils.h	/^class miscutils$/;"	c
mountnfs	lib/nfsutils.cpp	/^int nfsutils::mountnfs(string nfsloc, string sharedir, $/;"	f	class:nfsutils
myline	ut/utistreamiterator.cpp	/^class myline : public string {};$/;"	c	file:
netutils	lib/netutils.h	/^class netutils$/;"	c
nfsstart	lib/nfsutils.cpp	/^int nfsutils::nfsstart()$/;"	f	class:nfsutils
nfsstatus	lib/nfsutils.cpp	/^int nfsutils::nfsstatus()$/;"	f	class:nfsutils
nfsstop	lib/nfsutils.cpp	/^int nfsutils::nfsstop()$/;"	f	class:nfsutils
nfsutils	lib/nfsutils.h	/^class nfsutils$/;"	c
not_found	syncdir/bigint/Web_Server/httpd.c	/^void not_found(int client)$/;"	f
objs	lib/Makefile	/^objs = $(shell files=""; for file in `ls *.cpp *.c 2>\/dev\/null`; do obj=`echo $$file |sed -r 's\/(.*)\\.cpp\/\\1.o\/g'`; files="$$files $$obj"; done ; echo $$files)$/;"	m
operator !=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator!=(const BigInt &bt)const$/;"	f	class:BigInt
operator %	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator%(const BigInt &bt)$/;"	f	class:BigInt
operator %=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator%=(const BigInt &bt)$/;"	f	class:BigInt
operator &	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator&(u_long x)$/;"	f	class:BigInt
operator *	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator*(const BigInt &bt)$/;"	f	class:BigInt
operator *=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator*=(const BigInt &bt)$/;"	f	class:BigInt
operator +	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator+(const BigInt &bt)$/;"	f	class:BigInt
operator ++	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator++(int)$/;"	f	class:BigInt
operator ++	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator++()$/;"	f	class:BigInt
operator +=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator+=(const BigInt &bt)$/;"	f	class:BigInt
operator -	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator-(const BigInt &bt)$/;"	f	class:BigInt
operator --	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator--(int)$/;"	f	class:BigInt
operator --	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator--()$/;"	f	class:BigInt
operator -=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator-=(const BigInt &bt)$/;"	f	class:BigInt
operator /	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt BigInt::operator\/(const BigInt &bt)$/;"	f	class:BigInt
operator /=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator\/=(const BigInt &bt)$/;"	f	class:BigInt
operator <	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator<(const BigInt &bt)const$/;"	f	class:BigInt
operator <<	lib/logutils.cpp	/^logutils& logutils::operator<<(char* str)$/;"	f	class:logutils
operator <<	lib/logutils.cpp	/^logutils& logutils::operator<<(int lhs)$/;"	f	class:logutils
operator <<	lib/logutils.cpp	/^logutils& logutils::operator<<(string str)$/;"	f	class:logutils
operator <<	lib/logutils.h	/^        logutils& operator<<(eoltype eol)$/;"	f	class:logutils
operator <<	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^ostream& operator<<(ostream &out, const BigInt &bt)$/;"	f
operator <=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator<=(const BigInt &bt)const$/;"	f	class:BigInt
operator =	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^BigInt& BigInt::operator=(u_long value)$/;"	f	class:BigInt
operator =	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^SeqList<Type>& SeqList<Type>::operator=(const SeqList<Type> &st)$/;"	f	class:SeqList
operator ==	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator==(const BigInt &bt)const$/;"	f	class:BigInt
operator >	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator>(const BigInt &bt)const$/;"	f	class:BigInt
operator >	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator>(u_long x)const$/;"	f	class:BigInt
operator >=	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^bool BigInt::operator>=(const BigInt &bt)const$/;"	f	class:BigInt
operator >>	ut/utistreamiterator.cpp	/^istream& operator>>(istream& is, myline& line)$/;"	f
operator []	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^const u_char& BigInt::operator[](int pos)const$/;"	f	class:BigInt
operator []	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^u_char& BigInt::operator[](int pos)$/;"	f	class:BigInt
operator []	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^typename SeqList<Type>::const_reference SeqList<Type>::operator[](int pos)const$/;"	f	class:SeqList
operator []	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^typename SeqList<Type>::reference SeqList<Type>::operator[](int pos)$/;"	f	class:SeqList
plugindir	lib/command.h	/^        string plugindir;$/;"	m	class:ScriptCommand
pop_back	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::pop_back()$/;"	f	class:BigInt
pop_back	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::pop_back()$/;"	f	class:SeqList
pop_front	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::pop_front()$/;"	f	class:SeqList
push_back	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::push_back(u_char x)$/;"	f	class:BigInt
push_back	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::push_back(const Type &x)$/;"	f	class:SeqList
push_front	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^void BigInt::push_front(u_char x)$/;"	f	class:BigInt
push_front	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::push_front(const Type &x)$/;"	f	class:SeqList
pythonscripts	lib/command.h	/^        vector<string> pythonscripts;$/;"	m	class:ScriptCommand
reference	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^	typedef Type& reference;$/;"	t	class:SeqList
remove_instance	lib/singletontemplate.h	/^        static void remove_instance()$/;"	f	class:LASingletonTemplateBase
reverse	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::reverse()$/;"	f	class:SeqList
rpkg	lib/command.h	/^        string rpkg;$/;"	m	class:PkgCommand
runningflag	lib/command.cpp	/^int CommandExecuter::runningflag = 1;$/;"	m	class:CommandExecuter	file:
runningflag	lib/command.h	/^        static int runningflag;$/;"	m	class:CommandExecuter
sdlen	lib/netutils.h	/^    int sdlen;$/;"	m	struct:Message
serve_file	syncdir/bigint/Web_Server/httpd.c	/^void serve_file(int client, const char *filename)$/;"	f
sharedir	lib/command.h	/^        string sharedir;$/;"	m	class:SyncCommand
shellscripts	lib/command.h	/^        vector<string> shellscripts;$/;"	m	class:ScriptCommand
sighandler	laclient.cpp	/^void sighandler(int signo)$/;"	f
sighandler	ut/utudpclient.cpp	/^void sighandler(int signo)$/;"	f
singleton	ut/utsingleton.cpp	/^        singleton() {};$/;"	f	class:singleton	file:
singleton	ut/utsingleton.cpp	/^class singleton$/;"	c	file:
size	lib/logutils.cpp	/^static int size = 4096;$/;"	v	file:
size	syncdir/bigint/BigInt_Server/BigInt/BigInt.cpp	/^size_t BigInt::size()const$/;"	f	class:BigInt
size	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^size_t SeqList<Type>::size()const$/;"	f	class:SeqList
sm_instance	lib/singletontemplate.h	/^        static T* sm_instance;$/;"	m	class:LASingletonTemplateBase
sm_instance	lib/singletontemplate.h	/^T* LASingletonTemplateBase<T>::sm_instance = 0;$/;"	m	class:LASingletonTemplateBase
sockSer	ut/utudpclient.cpp	/^int sockSer = 0;$/;"	v
sort	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^void SeqList<Type>::sort()$/;"	f	class:SeqList
split	lib/strutils.cpp	/^int strutils::split(string inputstr, string separator, vector<string>& ret)$/;"	f	class:strutils
startbi	plugins/bigintinit.sh	/^function startbi()$/;"	f
startswith	lib/strutils.cpp	/^int strutils::startswith(string lhs, string rhs)$/;"	f	class:strutils
startup	syncdir/bigint/Web_Server/httpd.c	/^int startup(u_short *port)$/;"	f
strutils	lib/strutils.h	/^class strutils$/;"	c
svc	lib/nfsutils.cpp	/^static string svc = "nfs-kernel-server.service";$/;"	v	file:
svc	lib/nfsutils.cpp	/^static string svc = "nfs.service";$/;"	v	file:
tag	lib/netutils.h	/^    char tag[0];$/;"	m	struct:Message
tag	ut/utudpclient.cpp	/^    char tag[0];$/;"	m	struct:Message	file:
u_char	syncdir/bigint/BigInt_Server/BigInt/utili.h	/^typedef unsigned char u_char;$/;"	t
u_long	syncdir/bigint/BigInt_Server/BigInt/utili.h	/^typedef unsigned long u_long;$/;"	t
umount	lib/nfsutils.cpp	/^int nfsutils::umount(string mpt, int isforce)$/;"	f	class:nfsutils
unimplemented	syncdir/bigint/Web_Server/httpd.c	/^void unimplemented(int client)$/;"	f
upkgfile	lib/command.h	/^        string upkgfile;$/;"	m	class:UpdateCommand
warnlog	lib/logutils.cpp	/^int logutils::warnlog(const char *fmt, ...)$/;"	f	class:logutils
~Command	lib/command.h	/^        virtual ~Command() {};$/;"	f	class:Command
~LASingletonTemplateBase	lib/singletontemplate.h	/^        virtual ~LASingletonTemplateBase()$/;"	f	class:LASingletonTemplateBase
~PkgCommand	lib/command.h	/^        virtual ~PkgCommand() {}$/;"	f	class:PkgCommand
~ScriptCommand	lib/command.h	/^        virtual ~ScriptCommand() {}$/;"	f	class:ScriptCommand
~SeqList	syncdir/bigint/BigInt_Server/BigInt/SeqList.h	/^SeqList<Type>::~SeqList()$/;"	f	class:SeqList
~SyncCommand	lib/command.cpp	/^SyncCommand::~SyncCommand()$/;"	f	class:SyncCommand
~UpdateCommand	lib/command.h	/^        virtual ~UpdateCommand() {}$/;"	f	class:UpdateCommand
~singleton	ut/utsingleton.cpp	/^        ~singleton() $/;"	f	class:singleton
